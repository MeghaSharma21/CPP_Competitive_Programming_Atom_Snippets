'.source.cpp, .source.cc':

  'Starting template for all the codechef problems':
    'prefix': 'codechef'
    'body': '''
	#include <bits/stdc++.h>
	#define endl "\\\\n"
	using ll = long long int;
	using vi = vector<int>;
	using vll = vector<ll>;
	using vvi = vector < vi >;
	using pii = pair<int,int>
	using pll = pair<long long, long long>
	const int mod=1000000007;
	const ll inf=0x3f3fffffffff3fff;
	#define all(c) c.begin(),c.end()
	#define mp(x,y) make_pair(x,y)
	#define mem(a,val) memset(a,val,sizeof(a))
	#define eb emplace_back
	#define f first
	#define s second

	using namespace std;
	int main()
	{
		std::ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
		int T;
		cin>>T;
		// cin.ignore(); must be there when using getline(cin, s)
		while(T--)
		{

		}
		return 0;
	}
    '''

  'Starting template for all the codejam problems':
    'prefix': 'codejam'
    'body': '''

	#include <bits/stdc++.h>
	#define endl "\\\\n"
	using ll = long long int;
	using vi = vector<int>;
	using vll = vector<ll>;
	using vvi = vector < vi >;
	using pii = pair<int,int>
	using pll = pair<long long, long long>
	const int mod=1000000007;
	const ll inf=0x3f3fffffffff3fff;
	#define all(c) c.begin(),c.end()
	#define mp(x,y) make_pair(x,y)
	#define mem(a,val) memset(a,val,sizeof(a))
	#define eb emplace_back
	#define f first
	#define s second

	using namespace std;
	int main()
	{
		ifstream fin;
		ofstream fout;
		fin.open("input");
		fout.open("output");
		int T;
		fin>>T;
		for(int t=1;t<=T;t++)
		{
			ll ans=0;
			cout<<"Case #"<<t<<": "<<ans<<endl;
		}
		return 0;
	}
    '''

  'To calculate time taken by a particular code to run':
    'prefix': 'time'
    'body': '''
	std::chrono::time_point<std::chrono::high_resolution_clock> start, end;
	start = std::chrono::high_resolution_clock::now();
	/*
	Code goes here
	*/
	end = std::chrono::high_resolution_clock::now();
	ll elapsed_time = std::chrono::duration_cast<std::chrono::milliseconds>(end-start).count();
	cout << "\\\\nElapsed Time: " << elapsed_time << "ms\\\\n";
    '''
